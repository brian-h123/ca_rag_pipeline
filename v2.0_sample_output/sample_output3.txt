### LLM output ###

To create a strategy where you buy Bitcoin if its RSI drops below 30 and sell if it goes above 70, you can modify the existing code from Crypto Arsenal's documentation. Here is a modified version of the code snippet provided:

```python
class Strategy(StrategyBase):
    def __init__(self):
        # strategy property
        self.subscribed_books = {}
        self.period = 30 * 60
        self.options = {}

        self.last_type = 'sell'
        self.short_period = 5
        self.long_period = 10
        self.divide_quote = 0
        self.proportion = 0.2

        self.rsi_upper_band = 70  # Change the upper band to 70
        self.rsi_lower_band = 30  # Change the lower band to 30

    def on_order_state_change(self, order):
        pass

    def execute_strategy(self, curr_rsi_short, curr_rsi_long, prev_rsi_short, prev_rsi_long, available_base_amount, high_price, base):
        signal = 0

        if available_base_amount < self.divide_quote / high_price and available_base_amount > -self.divide_quote / high_price:
            # Buy if RSI drops below 30
            if curr_rsi_short < self.rsi_lower_band and prev_rsi_short > prev_rsi_long:
                signal = 1
            # Sell if RSI goes above 70
            if curr_rsi_short > self.rsi_upper_band:
                signal = -1

        return signal
```

In this modified code:
- The `rsi_upper_band` is set to 70, which means the strategy will sell Bitcoin if the RSI goes above 70.
- The `rsi_lower_band` is set to 30, which means the strategy will buy Bitcoin if the RSI drops below 30.
- The `execute_strategy` method is added to handle the logic of buying and selling based on the RSI values.

You can now use this modified code snippet in your trading strategy to buy Bitcoin when the RSI drops below 30 and sell when it goes above 70.


### Context Source ###

Source: RSI-en.py, Start_index: 2626
Source: RSI-en.py, Start_index: 2162
Source: RSI-en.py, Start_index: 2917
Source: RSI-en.py, Start_index: 0


### Context Similarity Score ###

(Document(metadata={'source': 'RSI-en.py', 'start_index': 2626, 'score': 0.45297005772590637}, page_content='# holding long position \n        elif available_base_amount > self.divide_quote/high_price:\n            if curr_rsi_short < curr_rsi_long and prev_rsi_short > prev_rsi_long:\n                signal = 2\n            if curr_rsi_short >  self.rsi_upper_band:\n                signal = 2'),
 Document(metadata={'source': 'RSI-en.py', 'start_index': 2162, 'score': 0.46861037611961365}, page_content='# initialize signal to be 0\n        signal = 0\n        if available_base_amount< self.divide_quote/high_price and available_base_amount > -self.divide_quote/high_price:\n            # open long position\n            if curr_rsi_short > curr_rsi_long and prev_rsi_short < prev_rsi_long:\n                signal = 1\n            # open short position\n            if curr_rsi_short < curr_rsi_long and prev_rsi_short > prev_rsi_long:\n                signal = -1'),
 Document(metadata={'source': 'RSI-en.py', 'start_index': 2917, 'score': 0.48361846804618835}, page_content="# holding short position\n        elif available_base_amount < -self.divide_quote/high_price:\n            if curr_rsi_short > curr_rsi_long and prev_rsi_short < prev_rsi_long:\n                signal = -2\n            if curr_rsi_short < self.rsi_lower_band:\n                signal = -2\n            \n        # Sell short\n        if signal == -1:\n            self['is_shorting'] = 'true'\n            CA.log('Sell short ' + str(base))\n            return [\n                {"),
 Document(metadata={'source': 'RSI-en.py', 'start_index': 0, 'score': 0.49064403772354126}, page_content="class Strategy(StrategyBase):\n    def __init__(self):\n        # strategy property\n        self.subscribed_books = {}\n        self.period = 30 * 60\n        self.options = {}\n\n        self.last_type = 'sell'\n        self.short_period = 5\n        self.long_period = 10\n        self.divide_quote = 0\n        self.proportion = 0.2\n\n        self.rsi_upper_band = 80\n        self.rsi_lower_band = 20\n\n\n    def on_order_state_change(self,  order):\n        pass"))